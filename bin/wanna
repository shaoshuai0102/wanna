#!/usr/bin/env node

var program = require('commander'),
    package = require('../package.json'),
    fs = require('fs'),
    path = require('path'),
    clc = require('cli-color'),
    logger = require('../lib/utils/logger');

program
    .description('Wanna is a blog-aware, static site generator in Node.js.')
    .version(package.version)
    .usage('<command> [options]')


// make console information more friendly
program.helpInformation = function() {
  return [
    '',
    '  ' + clc.green('â™¨') + '  ' + clc.bold(this._description),
    '',
    clc.cyan('  Usage: ') + this._name + ' ' + this.usage(),
    '' + this.commandHelp().replace(/Commands:/, clc.cyan('Commands:')),
    clc.cyan('  Options:'),
    '',
    '' + this.optionHelp().replace(/^/gm, '    '),
    '',
    ''
  ].join('\n');
};


// register all commands
var commands = getCommands();
commands.forEach(function(CMD) {
    var handler = program
                    .command(CMD.command)
                    .description(CMD.description)
                    .action(CMD.action);

    CMD.passHandler && CMD.passHandler(handler);

    CMD.options && CMD.options.forEach(function(v, i) {
        handler.option.apply(handler, v);
    });
});


program.parse(process.argv);

if (process.argv.length <=2 ) {
    logger.info('See "wanna -h" for help.');
};

// load all commands from 'lib/commands' directroy
function getCommands() {
    var dir = process.env._;
    var stat = fs.lstatSync(dir);
    var realpath = stat.isSymbolicLink() ? path.normalize(path.dirname(dir) + '/' + fs.readlinkSync(dir)) : dir;
    var dir_lib = path.normalize(path.dirname(realpath) + '/../lib'),
        dir_commands = dir_lib + '/commands';

    var filenames = fs.readdirSync(dir_commands);
    var commands = filenames
                    .filter(function(filename) {
                        return /.*\.js$/.test(filename);
                    })
                    .map(function(filename) {
                        return require(dir_commands + '/' + filename);
                    });
    return commands;
}
